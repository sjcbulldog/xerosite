<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/xeroteamsite/ui/navigation/NavGraph.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/xeroteamsite/ui/navigation/NavGraph.kt" />
              <option name="originalContent" value="package com.example.xeroteamsite.ui.navigation&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.remember&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.navArgument&#10;import com.example.xeroteamsite.data.preferences.PreferencesManager&#10;import com.example.xeroteamsite.data.repository.XerositeRepository&#10;import com.example.xeroteamsite.ui.screen.*&#10;import com.example.xeroteamsite.ui.viewmodel.LoginViewModel&#10;import com.example.xeroteamsite.ui.viewmodel.TeamDetailViewModel&#10;import com.example.xeroteamsite.ui.viewmodel.TeamListViewModel&#10;import kotlinx.coroutines.flow.first&#10;&#10;@Composable&#10;fun NavGraph(&#10;    navController: NavHostController,&#10;    preferencesManager: PreferencesManager,&#10;    startDestination: String = Screen.Login.route&#10;) {&#10;    val repository = remember { XerositeRepository(preferencesManager) }&#10;&#10;    // Initialize auth token&#10;    LaunchedEffect(Unit) {&#10;        repository.initializeAuthToken()&#10;    }&#10;&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = startDestination&#10;    ) {&#10;        composable(Screen.Login.route) {&#10;            val viewModel = remember { LoginViewModel(repository) }&#10;            LoginScreen(&#10;                viewModel = viewModel,&#10;                onLoginSuccess = {&#10;                    navController.navigate(Screen.TeamList.route) {&#10;                        popUpTo(Screen.Login.route) { inclusive = true }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;&#10;        composable(Screen.TeamList.route) {&#10;            val viewModel = remember { TeamListViewModel(repository) }&#10;            TeamListScreen(&#10;                viewModel = viewModel,&#10;                onTeamSelected = { teamId -&gt;&#10;                    navController.navigate(Screen.TeamDetail.createRoute(teamId))&#10;                },&#10;                onLogout = {&#10;                    kotlinx.coroutines.MainScope().kotlinx.coroutines.launch {&#10;                        repository.logout()&#10;                    }&#10;                    navController.navigate(Screen.Login.route) {&#10;                        popUpTo(0) { inclusive = true }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;&#10;        composable(&#10;            route = Screen.TeamDetail.route,&#10;            arguments = listOf(navArgument(&quot;teamId&quot;) { type = NavType.StringType })&#10;        ) { backStackEntry -&gt;&#10;            val teamId = backStackEntry.arguments?.getString(&quot;teamId&quot;) ?: return@composable&#10;            val viewModel = remember { TeamDetailViewModel(repository) }&#10;&#10;            TeamDetailScreen(&#10;                teamId = teamId,&#10;                viewModel = viewModel,&#10;                onNavigateToMembers = {&#10;                    navController.navigate(Screen.TeamMembers.route)&#10;                },&#10;                onNavigateToLinks = {&#10;                    navController.navigate(Screen.TeamLinks.route)&#10;                },&#10;                onNavigateToMedia = {&#10;                    navController.navigate(Screen.TeamMedia.route)&#10;                },&#10;                onNavigateToEvents = {&#10;                    navController.navigate(Screen.TeamEvents.route)&#10;                },&#10;                onNavigateToSubteams = {&#10;                    navController.navigate(Screen.TeamSubteams.route)&#10;                },&#10;                onBack = {&#10;                    navController.popBackStack()&#10;                }&#10;            )&#10;        }&#10;&#10;        composable(Screen.TeamMembers.route) {&#10;            val parentEntry = remember(navController) {&#10;                navController.getBackStackEntry(Screen.TeamDetail.route)&#10;            }&#10;            val viewModel = remember { TeamDetailViewModel(repository) }&#10;&#10;            TeamMembersScreen(&#10;                viewModel = viewModel,&#10;                onBack = { navController.popBackStack() }&#10;            )&#10;        }&#10;&#10;        composable(Screen.TeamLinks.route) {&#10;            val parentEntry = remember(navController) {&#10;                navController.getBackStackEntry(Screen.TeamDetail.route)&#10;            }&#10;            val viewModel = remember { TeamDetailViewModel(repository) }&#10;&#10;            TeamLinksScreen(&#10;                viewModel = viewModel,&#10;                onBack = { navController.popBackStack() }&#10;            )&#10;        }&#10;&#10;        composable(Screen.TeamMedia.route) {&#10;            val parentEntry = remember(navController) {&#10;                navController.getBackStackEntry(Screen.TeamDetail.route)&#10;            }&#10;            val viewModel = remember { TeamDetailViewModel(repository) }&#10;&#10;            TeamMediaScreen(&#10;                viewModel = viewModel,&#10;                onBack = { navController.popBackStack() }&#10;            )&#10;        }&#10;&#10;        composable(Screen.TeamEvents.route) {&#10;            val parentEntry = remember(navController) {&#10;                navController.getBackStackEntry(Screen.TeamDetail.route)&#10;            }&#10;            val viewModel = remember { TeamDetailViewModel(repository) }&#10;&#10;            TeamEventsScreen(&#10;                viewModel = viewModel,&#10;                onBack = { navController.popBackStack() }&#10;            )&#10;        }&#10;&#10;        composable(Screen.TeamSubteams.route) {&#10;            val parentEntry = remember(navController) {&#10;                navController.getBackStackEntry(Screen.TeamDetail.route)&#10;            }&#10;            val viewModel = remember { TeamDetailViewModel(repository) }&#10;&#10;            TeamSubteamsScreen(&#10;                viewModel = viewModel,&#10;                onBack = { navController.popBackStack() }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.xeroteamsite.ui.navigation&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.navArgument&#10;import com.example.xeroteamsite.data.preferences.PreferencesManager&#10;import com.example.xeroteamsite.data.repository.XerositeRepository&#10;import com.example.xeroteamsite.ui.screen.*&#10;import com.example.xeroteamsite.ui.viewmodel.LoginViewModel&#10;import com.example.xeroteamsite.ui.viewmodel.TeamDetailViewModel&#10;import com.example.xeroteamsite.ui.viewmodel.TeamListViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun NavGraph(&#10;    navController: NavHostController,&#10;    preferencesManager: PreferencesManager,&#10;    startDestination: String = Screen.Login.route&#10;) {&#10;    val repository = remember { XerositeRepository(preferencesManager) }&#10;&#10;    // Initialize auth token&#10;    LaunchedEffect(Unit) {&#10;        repository.initializeAuthToken()&#10;    }&#10;&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = startDestination&#10;    ) {&#10;        composable(Screen.Login.route) {&#10;            val viewModel = remember { LoginViewModel(repository) }&#10;            LoginScreen(&#10;                viewModel = viewModel,&#10;                onLoginSuccess = {&#10;                    navController.navigate(Screen.TeamList.route) {&#10;                        popUpTo(Screen.Login.route) { inclusive = true }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;&#10;        composable(Screen.TeamList.route) {&#10;            val viewModel = remember { TeamListViewModel(repository) }&#10;            val scope = rememberCoroutineScope()&#10;            TeamListScreen(&#10;                viewModel = viewModel,&#10;                onTeamSelected = { teamId -&gt;&#10;                    navController.navigate(Screen.TeamDetail.createRoute(teamId))&#10;                },&#10;                onLogout = {&#10;                    scope.launch {&#10;                        repository.logout()&#10;                    }&#10;                    navController.navigate(Screen.Login.route) {&#10;                        popUpTo(0) { inclusive = true }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;&#10;        composable(&#10;            route = Screen.TeamDetail.route,&#10;            arguments = listOf(navArgument(&quot;teamId&quot;) { type = NavType.StringType })&#10;        ) { backStackEntry -&gt;&#10;            val teamId = backStackEntry.arguments?.getString(&quot;teamId&quot;) ?: return@composable&#10;            val viewModel = remember { TeamDetailViewModel(repository) }&#10;&#10;            TeamDetailScreen(&#10;                teamId = teamId,&#10;                viewModel = viewModel,&#10;                onNavigateToMembers = {&#10;                    navController.navigate(Screen.TeamMembers.route)&#10;                },&#10;                onNavigateToLinks = {&#10;                    navController.navigate(Screen.TeamLinks.route)&#10;                },&#10;                onNavigateToMedia = {&#10;                    navController.navigate(Screen.TeamMedia.route)&#10;                },&#10;                onNavigateToEvents = {&#10;                    navController.navigate(Screen.TeamEvents.route)&#10;                },&#10;                onNavigateToSubteams = {&#10;                    navController.navigate(Screen.TeamSubteams.route)&#10;                },&#10;                onBack = {&#10;                    navController.popBackStack()&#10;                }&#10;            )&#10;        }&#10;&#10;        composable(Screen.TeamMembers.route) {&#10;            val parentEntry = remember(navController) {&#10;                navController.getBackStackEntry(Screen.TeamDetail.route)&#10;            }&#10;            val viewModel = remember { TeamDetailViewModel(repository) }&#10;&#10;            TeamMembersScreen(&#10;                viewModel = viewModel,&#10;                onBack = { navController.popBackStack() }&#10;            )&#10;        }&#10;&#10;        composable(Screen.TeamLinks.route) {&#10;            val parentEntry = remember(navController) {&#10;                navController.getBackStackEntry(Screen.TeamDetail.route)&#10;            }&#10;            val viewModel = remember { TeamDetailViewModel(repository) }&#10;&#10;            TeamLinksScreen(&#10;                viewModel = viewModel,&#10;                onBack = { navController.popBackStack() }&#10;            )&#10;        }&#10;&#10;        composable(Screen.TeamMedia.route) {&#10;            val parentEntry = remember(navController) {&#10;                navController.getBackStackEntry(Screen.TeamDetail.route)&#10;            }&#10;            val viewModel = remember { TeamDetailViewModel(repository) }&#10;&#10;            TeamMediaScreen(&#10;                viewModel = viewModel,&#10;                onBack = { navController.popBackStack() }&#10;            )&#10;        }&#10;&#10;        composable(Screen.TeamEvents.route) {&#10;            val parentEntry = remember(navController) {&#10;                navController.getBackStackEntry(Screen.TeamDetail.route)&#10;            }&#10;            val viewModel = remember { TeamDetailViewModel(repository) }&#10;&#10;            TeamEventsScreen(&#10;                viewModel = viewModel,&#10;                onBack = { navController.popBackStack() }&#10;            )&#10;        }&#10;&#10;        composable(Screen.TeamSubteams.route) {&#10;            val parentEntry = remember(navController) {&#10;                navController.getBackStackEntry(Screen.TeamDetail.route)&#10;            }&#10;            val viewModel = remember { TeamDetailViewModel(repository) }&#10;&#10;            TeamSubteamsScreen(&#10;                viewModel = viewModel,&#10;                onBack = { navController.popBackStack() }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>